import { readFileSync, readdirSync, writeFileSync } from 'node:fs';
import {generateFiles} from 'fumadocs-openapi';
import {createOpenAPI} from 'fumadocs-openapi/server';

/**
 * Validates that generated MDX files don't contain "[object Object]" serialization issues
 */
function validateGeneratedFiles(outputDir: string): void {
    const files = readdirSync(outputDir).filter(file => file.endsWith('.mdx'));

    for (const file of files) {
        const content = readFileSync(`${outputDir}/${file}`, 'utf-8');
        if (content.includes('document={"[object Object]"')) {
            throw new Error(`Generated file ${file} contains "[object Object]" serialization issue`);
        }
    }

    console.log(`✅ Validated ${files.length} generated files - no serialization issues found`);
}

/**
 * Validates that the OpenAPI JSON has the expected structure
 */
function validateOpenApiJson(openapiJson: Record<string, unknown>): void {
    if (!openapiJson || typeof openapiJson !== 'object') {
        throw new Error('OpenAPI JSON is not a valid object');
    }

    if (!openapiJson.paths || typeof openapiJson.paths !== 'object') {
        throw new Error('OpenAPI JSON missing or invalid paths section');
    }

    if (!openapiJson.info || typeof openapiJson.info !== 'object') {
        throw new Error('OpenAPI JSON missing or invalid info section');
    }

    console.log('✅ OpenAPI JSON structure validation passed');
}

async function generateDocs() {
    try {
        // Read the OpenAPI JSON file that was generated by update-docs.ts
        const openapiJson = JSON.parse(readFileSync('./openapi.json', 'utf-8'));

        // Validate the OpenAPI JSON structure before generation
        validateOpenApiJson(openapiJson);

        // Create OpenAPI server object with the schema
        const openapiServer = createOpenAPI({
            input: ['./openapi.json']
        });

        await generateFiles({
            input: openapiServer,
            output: './content/docs/api',
            includeDescription: true,
        });

        // Post-process generated files to fix the "[object Object]" serialization issue
        const outputDir = './content/docs/api';
        const files = readdirSync(outputDir).filter(file => file.endsWith('.mdx'));

        for (const file of files) {
            const filePath = `${outputDir}/${file}`;
            let content = readFileSync(filePath, 'utf-8');

            if (content.includes('<APIPage document={"[object Object]"}')) {
                // Create a proper object reference instead of the string
                content = content.replace(
                    /<APIPage document={"\[object Object\]"}/,
                    `<APIPage document={${JSON.stringify(openapiJson, null, 2)}}`
                );
                writeFileSync(filePath, content);
            }
        }

        // Validate generated files don't contain serialization issues
        validateGeneratedFiles('./content/docs/api');

        console.log('API docs generated successfully');
    } catch (error) {
        console.error('Error generating API docs:', error);
        process.exit(1);
    }
}

try {
    await generateDocs();
} catch (error) {
    console.error('Error generating API docs:', error);
    process.exit(1);
}